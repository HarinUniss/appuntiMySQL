

SCELTA DEL TIPO DI DATI 


la scelta del tipo di dati sbagliato potrebbe portare a:


	memoria sprecata (ad esempio, se si memorizzano dati molto piccoli in una colonna fatta per memorizzare grandi quantità di dati)

	problemi di prestazioni (ad esempio, è più veloce cercare su un numero che su una stringa)

	comportamento contrario a quello previsto (ad esempio, l'ordinamento su un numero memorizzato come tale o su un numero memorizzato come stringa di caratteri non darà lo stesso risultato);

	l'impossibilità di utilizzare funzionalità specifiche per un tipo di dati (ad esempio, la memorizzazione di una data come stringa ti priva delle molte funzioni temporali disponibili).

--------------------------------------------------------------------------------------------

TIPI NUMERICI

	NUMERI INTERI

		I tipi di dati che accettano numeri interi come valori sono designati dalla parola chiave INT e dalle sue declinazioni TINYINT, SMALLINT, MEDIUMINT  e BIGINT.

		La differenza tra questi tipi è il numero di byte riservati al valore del campo.


			Digitare 	byte 	Minimo					Massimo

			TINYINT 	1 		-128 					127

			SMALLINT	2		32768					32767	
			MEDIUMINT	3 		-8388608				8388607
			INT 		4 		-2147483648				2147483647
			BIGINT 		8 		-92233720368547708 		9223372036854775807


			Se si tenta di memorizzare un valore al di fuori dell'intervallo consentito dal tipo di campo, MySQL memorizzerà il valore più vicino.


			NB se si tenta di memorizzare 12457 in un TINYINT il valore memorizzato sarà 127!!!

----------------------------------------------------------------------------------------------
				+-----------+
	ATTRIBUTO 	| UNSIGNED  |
				+-----------+
		non specifichiamo se si tratta di un valore positivo o negativo 
		(quindi avremo sempre un valore positivo)

		In questo caso, la lunghezza dell'intervallo rimane la stessa, ma i valori possibili vengono spostati partendo dal MINIMO che é 0.

		Per i TINYINT possiamo ad esempio passare da 0 a 255


																		+---------+
	LIMITARE LA TAGLIA DELLA STAMPA A SCHERMO DELL'ATRIBUTO (dato)		| INT(x)  |
																		+---------+

		È possibile specificare il numero minimo di cifre quando si visualizza una colonna di tipo INT (o una delle sue derivate).
		È quindi sufficiente specificare questo numero tra parentesi:	INT(x)

		NB  non modifica le capacità di archiviazione nella colonna!!!!!!!!
																		  +----------+
	La taglia della stampa viene in genere utilizzata in combinazione con | ZEROFILL |
																		  +----------+

		es:
			INT(4) ZEROFILL

				Avrai la seguente vista:

				Numero memorizzato	Numero visualizzato

				4156				0045
				4156 				4156
				785164 				785164																  

-------------------------------------------------------------------------------------------

DECIMALI
	Cinque parole chiave vengono utilizzate per memorizzare i numeri decimali in una colonna:

			DECIMAL 	NUMERIC 	FLOAT 	REAL 	DOUBLE



			NUMERIC e DECIMAL  
			(memorizzati come stringhe dunque è il valore esatto che viene memorizzato)
				sono equivalenti e accettano due parametri:

					-Precisione
						Definisce il numero di cifre significative memorizzate, 
						quindi gli 0 a sinistra non contano. Infatti, 0024 equivale a 24. 
						Quindi ci sono solo due numeri significativi in 0024.

					-Scala
						Definisce il numero di cifre dopo il punto decimale.


					es:
						in un campo DECIMAL(5,3)
						possiamo quindi memorizzare numeri di 5 cifre significative al massimo, di cui 3 cifre sono dopo il punto decimale.


				NB 	DECIMAL(4)  equivale a scrivere  DECIMAL(4, 0)

				NB 	Se inseriamo un numero che non si trova nell'intervallo supportato 
					dalla colonna, MySQL lo sostituirà con quello supportato più vicino.



			FLOAT
				può essere utilizzata senza parametri, nel qual caso vengono utilizzati quattro byte per memorizzare i valori della colonna.

				Tuttavia, è possibile specificare una precisione e una scala, allo stesso modo di DECIMAL e NUMERIC


			REAL e DOUBLE
				non supportano i parametri.

				DOUBLE dovrebbe essere piu preciso di REAL 
				ma NON in MySQL che per entrambi usa 8 Byte per entrambi
				in altri SGBDR	per i REAL si usano 4 Byte

				NB 	meggli ousare sempre i DOUBLE per non cadere in errore 
					il giorno che si usa un altro SGBDR.

























